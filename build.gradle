plugins {
	id 'java'
	id 'jacoco'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.panasonic.jp'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.4")
}

dependencies {
	// implementation ('org.springframework.boot:spring-boot-starter-web') {
    //     exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
    // }
	// compileOnly 'org.springframework.boot:spring-boot-starter-tomcat'

	// Spring Cloud Runtime
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.0-M2'

	// H2 Database with Test Scope
	compileOnly 'com.h2database:h2:2.2.220'
	testImplementation 'com.h2database:h2:2.2.220'
	// runtimeOnly 'org.postgresql:postgresql' // 本番用

	// Development Scope
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Lombok Scope
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Test Scope
	testImplementation ('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	// misc dependencies
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

task buildZip(type: Zip) {
  from compileJava
  from processResources
  into('lib') {
    from(configurations.compileClasspath) {
      exclude 'tomcat-embed-*'
    }
  }
}

build.dependsOn buildZip

// jacoco start
jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
	reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
// jacoco end

// checkstyle start
checkstyle {
    toolVersion = '10.12.3'
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
        // html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}
// checkstyle end
